diabetes_mod
summary(diabetes_mod)
diabetes1_mod <- glm(diabetes ~ pregnant+glucose+mass+pedigree, PimaIndiansDiabetes2,
family = "binomial")
diabetes1_mod
summary(diabetes1_mod)
set.seed(2020)
n_col <- 100
n_row <- 1000
x <- as.data.frame(lapply(seq(n_col), function(i) rnorm(n_row)),
col.names = paste0("Feature_", seq(n_col)))
dim(x)
y <- .7 + x[, 10] + .3 * x[, 20] + 1.3 * x[, 30] + x[, 50] + rnorm(500)
.7 + x[, 10] + .3 * x[, 20] + 1.3 * x[, 30] + x[, 50] + rnorm(1000)
.7 + x[, 10] + .3 * x[, 20] + 1.3 * x[, 30] + x[, 50] + rnorm(500)
1:10+rnorm(5)
mod.xy.massuni <- lapply(seq(x), function(i) lm(y ~ x[, i]))
length(mod.xy.massuni)
mod.xy.massuni
x <- rnorm(9999)
system.time({
for (i in 2:9999) {
x[i]
x[i] <- x[i]^3
}
})
system.time(rnorm(9999999))
system.time(rnorm(9999999))
set.seed(2020)
x <- matrix(rnorm(500000), 5000)
y <- 12 + x[, 3] + x[, 5]^2 + x[, 7]^3 + rnorm(5000)
fit.glm <- function(x, y) glm.fit(x, y)
fit.glm_time10 <- replicate(10, system.time(fit.glm(x, y))[[1]])
boxplot(fit.glm_time10)
set.seed(2020)
x <- matrix(rnorm(500000), 5000)
y <- 12 + x[, 3] + x[, 5]^2 + x[, 7]^3 + rnorm(5000)
fit.glm <- function(x, y) glm.fit(x, y)
fit.glm_time10 <- replicate(10, system.time(fit.glm(x, y))[[1]])
boxplot(fit.glm_time10)
set.seed(2020)
x <- matrix(rnorm(500000), 5000)
y <- 12 + x[, 3] + x[, 5]^2 + x[, 7]^3 + rnorm(5000)
fit.glm <- function(x, y) glm.fit(x, y)
fit.glm_time10 <- replicate(10, system.time(fit.glm(x, y))[[1]])
boxplot(fit.glm_time10)
?proc.time
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
proc.time() - ptm
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(50000))
proc.time() - ptm
Sys.time(for (i in 1:50) mad(stats::runif(50000)))
Sys.time(for (i in 1:50) {mad(stats::runif(50000))})
Sys.time(mad(stats::runif(50000))
Sys.time(mad(stats::runif(50000))))
Sys.time(mad(stats::runif(50000)))
set.seed(2021)
xmat <- matrix(rnorm(500*5), 5)
xdf <- as.data.frame(xmat)
silly_square <- function(x) {
for (i in seq_len(NROW(x))) {
for (j in seq_len(NCOL(x))) {
x[i, j] <- x[i, j]^2
}
}
}
mat_df_sq <- microbenchmark(silly_square_mat = silly_square(xmat),
silly_square_df = silly_square(xdf),
mat_squared = xmat^2,
df_squared = xdf^2)
mat_df_sq <-microbenchmark::microbenchmark(silly_square_mat = silly_square(xmat),
silly_square_df = silly_square(xdf),
mat_squared = xmat^2,
df_squared = xdf^2)
mat_df_sq
plot(mat_df_sq)
?tapply
library(profvis)
profvis({
hf <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv")
str(hf)
lt5 <- which(sapply(hf, \(i) length(unique(i))) < 5)
for (i in lt5) hf[, i] <- factor(hf[, i])
index_numeric <- which(sapply(hf, is.numeric))
par(mfrow = c(1, length(index_numeric)))
for (i in index_numeric) boxplot(hf[, i])
par(mfrow = c(1, 1))
})
profvis(rnorm(100))
library(nycflights13)
class(flights)
profvis(flights_aggregate_formula <- function() {
aggregate(arr_delay ~ carrier,
data = flights_df,
mean, na.rm = TRUE)
})
set.seed(2020)
x <- sapply(seq(10), function(i) rnorm(500))
y <- 12 + 1.5 * x[, 3] + 3.2 * x[, 7] + .5 * x[, 9] + rnorm(500)
x
mod.glm <- s_GLM(x, y)
rtemis::s_GLM(x,y)
require(rtemis)
s_GLM(glucose~.,data=PimaIndiansDiabetes2)
View(PimaIndiansDiabetes2)
s_GLM(PimaIndiansDiabetes2[,c(1,3:9)],PimaIndiansDiabetes2$glucose)
as.list(c(mean(1:10), rep(0, 5)))
?optim
install.packages(c("DEoptimR", "fMultivar", "GenSA", "KernSmooth", "MatrixModels", "mgcv", "ROI.plugin.quadprog", "sf", "xml2"))
require(zoo)
zr.2 <- zooreg(c(1, 3, 5, 7, 9, 11, 13, 17),
start=ymd("2018-01-01"), frequency = 1)
require(lubridate)
zr.2 <- zooreg(c(1, 3, 5, 7, 9, 11, 13, 17),
start=ymd("2018-01-01"), frequency = 1)
zr.2
is.regular(zr.2)
as.ts(zr.2)
acf(zr.2)
pacf(zr.2)
plot(zr.2)
set.seed(2)
z.2 <- zoo(cbind(x=sample(5:10, size=12, replace=TRUE),
y=sample(8:13, size=12, replace=TRUE)),
make_date(2018, 1, 1) + ddays(0:11)); z.2
plot(z.2)
plot(z.2,plot.type = 'multiple')
plot(z.2,plot.type='multiple')
plot(z.2,plot.type='single')
plot(z.2,plot.type='single',col = c('red','black'))
plot(z.2,plot.type='single',col = c('red','blue'))
z.2
z.2[2:4]
z.2[2]
z.2[y]
z.2['y']
z.2[,'y']
names(z.2)
set.seed(1)
z.1 <- zoo(sample(3:6, size=12, replace=TRUE),
make_date(2018, 1, 1) + ddays(0:11)); z.1
z.1
merge(z.1,1:12)
merge(z.1,1:11)
merge(z.1,1:12)
cumsum(z.2)
z.2
prod(z.2)
prod(z.2$x)
prod(z.2$y)
1.5*.14
cummin(z.2)
cumprod(z.2)
??lag
xts::lag.xts(z.2)
diff(z.2)
z.2
diff(z.2)/xts::lag.xts(z.2)
?filter()
library(xts, quietly = TRUE)
xts.1 <- xts(
c(5, 5, 4, 6, 4, 3, 3, 3, 4, 5, 5, 4),
make_date(2018, 1, 1) + ddays(0:11)); xts.1
names(xts.1)
names(xts.1) <- 'x'
xts.1
str
str(xts.1)
str(z.2)
attr(xts.1)
attr(xts.1,"dim")
attr(xts.1,"dim")
attr(xts.1,"index")
attr(xts.1,"class")
attr(xts.1,"dimnames")
attributes(xts.1)
attributes(xts.1)$'ts' <- 'clst'
attributes(xts.1)
attr(xts.1,which = 'ts')
mtcars[2]
xts.ap <- as.xts(AirPassengers)
xts.ap["1949"]
xts.ap['02']
xts.ap
xts.ap['1æœˆ']
xts.ap['194901']
xts.ap['194901::196001']
plot(xts.ap, main="Air Passengers")
plot(xts.ap, main="Air Passengers",
major.ticks="years", minor.ticks=NULL,
grid.ticks.on="years", format.labels="%Y",
col="red")
plot(xts.ap, main="Air Passengers",
major.ticks="years", minor.ticks='months',
grid.ticks.on="years", format.labels="%Y",
col="red")
plot(xts.ap, main="Air Passengers",
major.ticks="years", minor.ticks='months',
grid.ticks.on="months", format.labels="%Y",
col="red")
plot(xts.ap, main="Air Passengers",
major.ticks="years", minor.ticks='months',
grid.ticks.on="day", format.labels="%Y",
col="red")
plot(xts.ap, main="Air Passengers",
major.ticks="years", minor.ticks='months',
grid.ticks.on="days", format.labels="%Y",
col="red")
endpoints(xts.ap, on="years")
period.apply(xts.ap,endpoints(xts.ap,on = 'years'),mean)
period.apply(xts.ap,endpoints(xts.ap,on = 6),mean)
period.apply(xts.ap,endpoints(xts.ap,on = 'weeks'),mean)
period.max(xts.1,INDEX = 'weeks')
period.max(xts.ap,INDEX = 'weeks')
period.max(xts.ap,INDEX = 'months')
period.max(xts.ap,INDEX = 'years')
xts.ap
period.max(xts.ap,INDEX = endpoints(xts.ap,on='years'))
period.max(xts.ap,INDEX = endpoints(xts.ap,on='months'))
MSFT <- getSymbols("MSFT", src="yahoo", auto.assign = FALSE)
MSFT <-quantmod:: getSymbols("MSFT", src="yahoo", auto.assign = FALSE)
MSFT <-quantmod::getSymbols("UNRATE", src="FRED", auto.assign=FALSE)
MSFT
pedquant::md_stock('300101')
pedquant::md_stock('300101')|>unlist()
torch::cuda_runtime_version()
vector('list',3)
c('a',TRUE)
?reorder
??reorder
reorder(mtcars$cyl)
reorder(as.factor(mtcars$cyl),)
NA_character_
NA_integer_
install.packages(c("openssl", "sass"))
x <- c(20, 22, 25, 30, 40)
fleft <- function(R) -100 + sum(x / (1+R)^(1:5))
uniroot(fleft, c(-0.99, 10.0), extendInt="downX")
?uniroot
f <- function(num){
hello <- 'Hello,world!\n'
for (i in seq_len(num)) {
cat(hello)
}
}
f
chars <- nchar(hello)*num
f <- function(num){
hello <- 'Hello,world!\n'
for (i in seq_len(num)) {
cat(hello)
}
chars <- nchar(hello)*num
chars
}
f
f(3)
meaningoflife <- f(3)
print(meaningoflife)
formals(cat)
formals(f)
formalArgs(f)
formalArgs(cat)
str(rnorm)
args(rnorm)
formalArgs(rnorm())
formalArgs(rnorm)
formals(rnorm)
rstatix::cor_pmat(mtcars)
rstatix::cor_test(rnorm(100),runif(100))
rstatix::cor_test(data.frame(rnorm(100),runif(100)))
car::qq.plot(rnorm(199))
car::qqplot(rnorm(199))
car::qqPlot(rnorm(199))
match.fun(mean)
match.fun('mean')
?.Internal
lapply
al.list(mtcars)
as.list(mtcars)
sapply
?gl
f <- gl(3, 10)
f
search()
a.env <- new.env()
search()
a.env
.GlobalEnv
require(TSA)
search()
require(ggplot2)
search()
devtools::install_github("andrewuhl/RollingWindow")
RollingWindow::RollingSum(1:1000000,10)
roll::roll_sum(1:1000000,10)
microbenchmark::microbenchmark()
microbenchmark::microbenchmark(RollingWindow::RollingSum(1:1000000,10),roll::roll_sum(1:1000000,10))
microbenchmark::microbenchmark(RollingWindow::RollingSum(1:1000000,10),roll::roll_sum(1:1000000,10),RcppRoll::roll_sum(1:1000000,10))
microbenchmark::microbenchmark(RollingWindow::RollingSum(1:1000000,10),roll::roll_sum(1:1000000,10),RcppRoll::roll_sum(1:1000000,10))
parallel::detectCores()
require(parallel)
r <- mclapply(1:10, function(i) {
+         Sys.sleep(10)  ## Do nothing for 10 seconds
+ }, mc.cores = 10)
r <- mclapply(1:10, function(i) {
Sys.sleep(10)
}, mc.cores = 10)
?mc.cores
??mc.cores
library(tidyverse)
library(ggplot2)
library(ggflags)
install.packages("ggflags")
devtools::install_github('ellisp/ggflags')
devtools::install_github('ellisp/ggflags')
devtools::install_github('ellisp/ggflags')
devtools::install_github('ellisp/ggflags')
options(download.file.method = 'wininet')
devtools::install_github('ellisp/ggflags')
library(tidyverse)
library(ggplot2)
library(ggflags)
library(countrycode)
dat <- tibble(country = toupper(c("US", "Italy", "Canada", "UK", "Japan", "Germany", "France", "Russia")),
count = c(3.2, 0.71, 0.5, 0.1, 0, 0.2, 0.1, 0),
label = c(as.character(c(3.2, 0.71, 0.5, 0.1, 0, 0.2, 0.1)), "No Data"),
code = c("us", "it", "ca", "gb", "jp", "de", "fr", "ru"))
dat %>% mutate(country = reorder(country, -count)) %>%
ggplot(aes(country, count, label = label)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(nudge_y = 0.2, color = "darkred", size = 5) +
geom_flag(y = -.5, aes(country = code), size = 12) +
scale_y_continuous(breaks = c(0, 1, 2, 3, 4), limits = c(0,4)) +
geom_text(aes(6.25, 3.8, label = "Source UNODC Homicide Statistics")) +
ggtitle(toupper("Homicide Per 100,000 in G-8 Countries")) +
xlab("") +
ylab("# of gun-related homicides\nper 100,000 people") +
ggthemes::theme_economist() +
theme(axis.text.x = element_text(size = 8, vjust = -16),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1,1,1,1), "cm"))
dat <- tibble(country = toupper(c("United States", "Canada", "Portugal", "Ireland", "Italy", "Belgium", "Finland", "France", "Netherlands", "Denmark", "Sweden", "Slovakia", "Austria", "New Zealand", "Australia", "Spain", "Czech Republic", "Hungry", "Germany", "United Kingdom", "Norway", "Japan", "Republic of Korea")),
count = c(3.61, 0.5, 0.48, 0.35, 0.35, 0.33, 0.26, 0.20, 0.20, 0.20, 0.19, 0.19, 0.18, 0.16,
0.16, 0.15, 0.12, 0.10, 0.06, 0.04, 0.04, 0.01, 0.01))
dat %>%
mutate(country = reorder(country, count)) %>%
ggplot(aes(country, count, label = count)) +
geom_bar(stat = "identity", fill = "darkred", width = 0.5) +
geom_text(nudge_y = 0.2,  size = 3) +
xlab("") + ylab("") +
ggtitle(toupper("Gun Murders per 100,000 residents")) +
theme_minimal() +
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.ticks.length = unit(-0.4, "cm")) +
coord_flip()
require(tidytable)
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
map(~pedquant::md_stock(.))
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% as.vector()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% as.vector() %>%
pedquant::md_stock()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% as.vector() %>%
str()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% as.vector() %>%
bind_rows()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol)
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% droplevels.data.frame()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% droplevels.data.frame() %>% as.vector()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% droplevels.data.frame() %>% as.vector() ->t
str(t)
unlist(t)
unlist(t) %>% str()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol)  %>% as.vector() %>% unlist() %>% pedquant::md_stock()
t
t$symbol
t$symbol %>% pedquant::md_stock()
pedquant::md_stock_symbol(exchange = c('szse','sse')) %>% bind_rows() %>%
filter(market=='stock') %>%
select(symbol) %>% slice_sample(10) %>%
select(symbol) %>% droplevels.data.frame() %>% as.vector() %>% .$symbol %>% pedquant::md_stock()
readLines('https://github.com/hadv/PAR/blob/master/homicides.txt')
homicides <- readLines(choose.files())
homicides
homicides[1]
read.table(choose())
read.table(choose.files())
length(homicides)
homicides[1000]
grep("iconHomicideShooting", homicides)
grep("iconHomicideShooting|icon_homicide_shooting", homicides)
grep("Cause: shooting", homicides)
grep("Cause: [Ss]hooting", homicides)
grep('^u',state.name)
grep('^n',state.name)
grep('^N',state.name)
grep('^N',state.name,value = T)
grep('^[NS]',state.name,value = T)
e
exp(6)
install.packages("effects")
install.packages("mvoutlier")
system.file()
system.time(rnorm(19999))->t
t
str(t)
t
attr(t,which = 'user.child')
## Elapsed time > user time
system.time(readLines("http://www.jhsph.edu"))
user  system elapsed
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+")
}
hilbert(1000)
x <- hilbert(10000)
system.time(svd(x))
x <- hilbert(1000)
system.time(svd(x))
1892/60
Rprof()
rnorm(100)
Rprof(NULL)
Rprof()
lm(y~x)
lm(cars$dist~cars$speed)
summaryRprof()
Rprof(m(cars$dist~cars$speed))
Rprof(m(cars$dist~cars$speed))
Rprof()
Rprof(NULL)
Rprof()
lm(cars$dist~cars$speed)
summaryRprof()
summaryRprof()
Rprof(NULL)
Rprof()
lm(cars$dist~cars$speed)
Rprof(NULL)
summaryRprof()
Rprof()
lm(dist~speed,data = cars)
Rprof(NULL)
summaryRprof()
Rprof()
lm(dist~speed,data = cars)
summaryRprof()
(NULL)
Rprof(NULL)
Rprof()
lm(dist~speed,data = cars)
summaryRprof()
mean(x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
q
lm(y~x)
lm(y~x)
ls()
undebug(lm)
lm(y~x)
version()
version
car::Anova(iris$Sepal.Length~iris$Species)
anova(iris$Sepal.Length~iris$Species)
install.packages("stringx")
stringx::LETTERS_BF
stringx::LETTERS_GREEK
install.packages("genieclust")
pedquant::md_stock('515080.of')
install.packages(c("bslib", "cpp11", "DEoptimR", "effectsize", "FinNet", "flexdashboard", "gert", "ggstatsplot", "gss", "htmltools", "igraph", "ks", "lamW", "magick", "modeldata", "nlme", "progressr", "promises", "purrr", "rbibutils", "RcppArmadillo", "recipes", "renv", "reticulate", "Rmpfr", "targets", "tinytex", "units", "xefun", "xfun"))
setwd("D:/r_git/housing")
sessionInfo()
sessioninfo::external_info()
sessioninfo::session_diff()
